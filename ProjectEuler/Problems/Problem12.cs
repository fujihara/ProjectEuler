using System;
using System.Linq;
using System.Collections.Generic;

namespace ProjectEuler
{
	public class Problem12 : Problem
	{
		public Problem12 ()
		{
			this.problemId = 12;
			this.problemName = "Highly divisible triangular number";
			this.problemDescription = "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n\n1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n\nLet us list the factors of the first seven triangle numbers:\n\n 1: 1\n 3: 1,3\n 6: 1,2,3,6\n10: 1,2,5,10\n15: 1,3,5,15\n21: 1,3,7,21\n28: 1,2,4,7,14,28\nWe can see that 28 is the first triangle number to have over five divisors.\n\nWhat is the value of the first triangle number to have over five hundred divisors?";
		}

		// http://www.mathblog.dk/triangle-number-with-more-than-500-divisors/
		public override void Solve ()
		{
			DateTime start = DateTime.Now;
			int triangle = 0;
			int largest = 0;
			for (int x = 0; x <= 100000; x++) {
				triangle += x;

				int num = GetNumberOfDivisors2 (triangle);
				if (num > largest) {
					largest = num;
				}

				//Console.WriteLine ("X: {2} - Triangle: {0}, Nº divisor: {1}", triangle, num, x);
				if (num > 500) {
					Console.WriteLine ("Triangle: {0}, Nº divisor: {1}", triangle, num);
					break;
				}
			}

			TimeSpan time = DateTime.Now - start;

			Console.WriteLine ();
			Console.WriteLine ("Largest divisor: {0}", largest);
			Console.WriteLine ("Elapsed time: {0}", time.TotalMilliseconds);
		}

		private int GetNumberOfDivisors1(int number)
		{
			var divisors = from d in Enumerable.Range (1, number)
					where number % d == 0
				select d;

			return divisors.Count ();
		}

		private int GetNumberOfDivisors2(int number)
		{
			int max = (int)Math.Sqrt (number);
			//int max = number / 2 + 1;
			int count = 0;
			for (int x = 1; x < max; x++) {
				if (number % x == 0) {
					count += 2;
				}
			}
			//Correction if the number is a perfect square
			if (max * max == number) {
				number--;
			}

			return ++count;
		}
	}
}

